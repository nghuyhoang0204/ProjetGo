SUCCESS - CODE COMPLEXE FONCTIONNE
==================================

Code: function saluer(n: string): void {
  console.log("Bonjour " + n);
}

if (age >= 18) {
  majeur = true;
} else {
  majeur = false;
}

let notes: number[] = [12, 15, 9];
let eleve = { nom: nom, age: age };

for (let i = 0; i < notes.length; i++) {
  console.log("Note :", notes[i]);
}

let compteur: number = 3;
while (compteur > 0) {
  console.log("Compte :", compteur);
  compteur--;
}

saluer(eleve.nom);
console.log("Est majeur :", majeur);

Parsed Elements: 18

=== JavaScript ===
{

};
age >= 18;
{

};
{

};
notes;
number[];
[12, 15, 9];
let eleve = {
  nom: nom,
  age: age
};
i < notes.length;
i;
{

};
compteur;
number;
3;
{

};
eleve.nom;
log("Est majeur :");
majeur;


=== Java ===
public class GeneratedCode {
    public static void main(String[] args) {
        java.util.HashMap<String, Object> eleve = new java.util.HashMap<String, Object>() {{ put("nom", nom);  put("age", age); }};
        new java.util.HashMap<String, Object>() {{; }};
        age >= 18;
        new java.util.HashMap<String, Object>() {{; }};
        new java.util.HashMap<String, Object>() {{; }};
        notes;
        number[];
        {12, 15, 9};
        i < ;
        i;
        new java.util.HashMap<String, Object>() {{; }};
        compteur;
        number;
        3;
        new java.util.HashMap<String, Object>() {{; }};
        ;
        log("Est majeur :");
        majeur;
    }
}


=== Python ===
eleve = {"nom": nom, "age": age}

# Main execution
{}
age >= 18
{}
{}
notes
number[]
[12, 15, 9]
i < 
i
{}
compteur
number
3
{}

log("Est majeur :")
majeur


=== C# ===
using System;

namespace GeneratedCode
{
    class Program
    {
        static void Main(string[] args)
        {
            var eleve = ;
        }
    }
}


=== Go ===
package main

func main() {
    var eleve interface{} = 
}


